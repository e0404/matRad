classdef matRad_PlanWidget < matRad_Widget
    % matRad_PlanWidget class to generate GUI widget for plan parameters
    %
    % References
    %   -
    %
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    % Copyright 2020 the matRad development team. 
    % 
    % This file is part of the matRad project. It is subject to the license 
    % terms in the LICENSE file found in the top-level directory of this 
    % distribution and at https://github.com/e0404/matRad/LICENSES.txt. No part 
    % of the matRad project, including this file, may be copied, modified, 
    % propagated, or distributed except according to the terms contained in the 
    % LICENSE file.
    %
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    properties
        State = false
        Machines
        Optimizations
    end
    
    properties (Access = private)
        hTissueWindow;
    end
    
    properties (Constant)
        Modalities = {'photons','protons','carbon'};
    end
    
    methods
        function this = matRad_PlanWidget(handleParent)
            matRad_cfg = MatRad_Config.instance();
            if nargin < 1
                handleParent = figure(...
                    'Units','characters',...
                    'Position',[100 50 125 15],...
                    'Visible','on',...
                    'Color',matRad_cfg.gui.backgroundColor,... 
                    'IntegerHandle','off',...
                    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
                    'MenuBar','none',...
                    'Name','MatRad Plan',...
                    'NumberTitle','off',...
                    'HandleVisibility','callback',...
                    'Tag','figure1');
                
            end
            this = this@matRad_Widget(handleParent);
            
            update(this);
            
            handles=this.handles;
            
            if matRad_cfg.eduMode
                %Visisbility in Educational Mode
                eduHideHandles =   {handles.radiobutton3Dconf,...
                    handles.btnRunDAO};
                eduDisableHandles = {handles.editCouchAngle,handles.popUpMachine};
                cellfun(@(h) set(h,'Visible','Off'),eduHideHandles);
                cellfun(@(h) set(h,'Enable','Off'),eduDisableHandles);
            end
            this.handles=handles;

        end
        
        function this = initialize(this)
        end
        
        function this = update(this,evt)          
            doUpdate = true;
            if nargin == 2
                %At pln changes and at cst/cst (for Isocenter and new settings) 
                %we need to update
                doUpdate = this.checkUpdateNecessary({'pln','ct','cst'},evt);
            end
            
            if doUpdate
                if evalin('base','exist(''pln'')')
                  getPlnFromWorkspace(this);
                else
                  setPlnDefaultValues(this);
                end
            end
        end
        
    end
    
    methods(Access = protected)
        function this = createLayout(this)
            %TODO: Documentation. Maybe explain which parts are initialized
            h12 = this.widgetHandle;
            
            matRad_cfg = MatRad_Config.instance();
            
            gridSize = [5 8];
            [i,j] = ndgrid(1:gridSize(1),1:gridSize(2));
            gridPos = arrayfun(@(i,j) computeGridPos(this,[i j],gridSize),i,j,'UniformOutput',false);
            %TODO: Should there be additional information here for the h's?
            txt = sprintf('Photons: Choose width (and height) of quadratic photon bixel (i.e. discrete fluence elements)\nParticles: Choose lateral spot distance');
            h13 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','bixel width in [mm]',...
                'Tooltip',txt,...
                'Style','text',...
                'Position',gridPos{1,1},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Tag','txtBixelWidth',...                
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Photons: Choose width (and height) of quadratic photon bixel (i.e. discrete fluence elements)\nParticles: Choose lateral spot distance');
            h14 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','5',...
                'Tooltip',txt,...
                'Style','edit',...
                'Position',gridPos{2,1},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'Tag','editBixelWidth',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Define gantry angles according to the matRad coordinate system\nEvery gantry angle defines a beam and needs a couch angle\nSeparate individual angles by blanks');
            h15 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Gantry Angle in °',...
                'Tooltip',txt,...
                'Style','text',...
                'Position',gridPos{1,2},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Tag','txtGantryAngle',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Define gantry angles according to the matRad coordinate system\nEvery gantry angle defines a beam and needs a couch angle\nSeparate individual angles by blanks');
            h16 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','0',...
                'Tooltip',txt,...
                'Style','edit',...
                'Position',gridPos{2,2},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Callback',@(hObject,eventdata)standardCallback(this,hObject,eventdata),...
                'Tag','editGantryAngle',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Define couch angles according to the matRad coordinate system\nEvery couch angle defines a beam and needs a gantry angle\nSeparate individual angles by blanks');
            h17 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Couch Angle in °',...
                'Tooltip',txt,...
                'Style','text',...
                'Position',gridPos{1,3},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Tag','txtCouchAngle',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Define couch angles according to the matRad coordinate system\nEvery couch angle defines a beam and needs a gantry angle\nSeparate individual angles by blanks');
            h18 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','0',...
                'Tooltip',txt,...
                'Style','edit',...
                'Position',gridPos{2,3},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Callback',@(hObject,eventdata)standardCallback(this,hObject,eventdata),...
                'Tag','editCouchAngle',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            h19 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String',this.Modalities,...,...
                'Tooltip','Choose a radiation modality (photons, protons or carbon)',...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{2,4},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Callback',@(hObject,eventdata)popupRadMode_Callback(this,hObject,eventdata),...
                'Tag','popupRadMode',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            h20 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Radiation Mode',...
                'Tooltip','Choose a radiation modality (photons, protons or carbon)',...
                'Style','text',...
                'Position',gridPos{1,4},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtRadMode');
            
            h21 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','# Fractions',...
                'Tooltip','Define the number of fractions',...
                'Style','text',...
                'Position',gridPos{1,7},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtNumOfFractions');
            
            h22 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'Tooltip','Define the number of fractions',...
                'String','30',...
                'Style','edit',...
                'Position',gridPos{2,7},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'Tag','editFraction',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Choose the isocenter of the treatment plan in voxel coordinates within the ct.cube\nIf Auto. is checked, the isocenter is calculated as the center of gravity of all voxels belonging to structures that have been modeled as target volume in the cst cell');
            h23 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','IsoCenter in [mm]',...
                'Tooltip',txt,...
                'Style','text',...
                'Position',gridPos{1,6},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Tag','txtIsoCenter',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Choose the isocenter of the treatment plan in voxel coordinates within the ct.cube\nIf Auto. is checked, the isocenter is calculated as the center of gravity of all voxels belonging to structures that have been modeled as target volume in the cst cell');
            h24 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','0 0 0',...
                'Tooltip', txt,...
                'Style','edit',...
                'Position',gridPos{2,6},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'Enable','off',...
                'Tag','editIsoCenter',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            h25 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Auto.',...
                'Tooltip','If this is checked, the isocenter is calculated as the center of gravity of all voxels belonging to structures that have been modeled as target volume in the cst cell',...
                'Style','checkbox',...
                'Value',1,...
                'Position',gridPos{3,6},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','checkIsoCenter');
            
            
            pos = gridPos{4,2};
            pos(3) = pos(3)*2;
            
              txt = sprintf('Check this if you want to run a MLC sequencing\nThe number of stratification levels can be adjusted below');
              h26 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Run Sequencing',...
                'Tooltip',txt,...
                'Style','radiobutton',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Enable','off',...
                'Tag','btnRunSequencing');
            
            pos = gridPos{4,6};
            pos(3) = pos(3)*2;
            
            h27 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Run Direct Aperture Optimization',...
                'Tooltip','Check this if you want to run an additional direct aperture optimization',...
                'Style','radiobutton',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'Callback',@(hObject,eventdata)standardCallback(this,hObject,eventdata),...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Enable','off',...
                'Tag','btnRunDAO' );
            
            pos = gridPos{4,3};
            pos(3) = pos(3) * 1.5;

            h28 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Stratification Levels:',...
                'Tooltip','Choose the number of stratification levels in case you run a MLC sequencing',...
                'HorizontalAlignment','left',...
                'Style','text',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtSequencing' );
            

            pos = gridPos{5,3};
            pos(3) = pos(3) / 2;
                        
            
            h29 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','7',...
                'Tooltip','Choose the number of stratification levels in case you run a MLC sequencing',...
                'Style','edit',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata)standardCallback(this,hObject,eventdata),...
                'Enable','off',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','editSequencingLevel');
            
            txt = sprintf('Choose a base data set\nIf Generic is selected for a photon treatment plan, the already available photons_Generic.mat file is loaded');
            h30 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String',{'Generic','generic_MCsquare'},...
                'Tooltip',txt,...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{2,5},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) popUpMachine_Callback(this,hObject,eventdata),...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','popUpMachine');
           
            h31 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Machine',...
                'Tooltip','Choose a base data set',...
                'Style','text',...
                'Position',gridPos{1,5},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtMachine' );
            
             txt = sprintf('Set the tissue parameters of the VOIs\nThe base data file contains depth-dependent alpha and beta values, which are different depending on the tissue class');
             h32 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Set Tissue',...
                'Tooltip',txt,...
                'Position',gridPos{3,8},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) btnSetTissue_Callback(this,hObject,eventdata),...
                'Enable','off',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','btnSetTissue'); 
            
            txt = sprintf('Choose a biological model\nNone: physical dose is optimized\nconst_RBExD: RBE-weighted dose assuming a constant RBE is optimized\nLEMIV_effect: effect calculated according to LEMIV is optimized\nLEMIV_RBExD: RBE-weighted dose calculated according to LEMIV is optimized');
            h33 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String',{  'none'; 'const_RBExD'; 'LEMIV_effect'; 'LEMIV_RBExD' },...
                'Tooltip',txt,...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{2,8},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) popMenuBioOpt_Callback(this,hObject,eventdata),...
                'Tag','popMenuBioOpt',...
                'Enable', 'off',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Choose a biological model when generating a particle beam\nNone: physical dose is optimized\nconst_RBExD: RBE-weighted dose assuming a constant RBE is optimized\nLEMIV_effect: effect calculated according to LEMIV is optimized\nLEMIV_RBExD: RBE-weighted dose calculated according to LEMIV is optimized');
            h34 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Biological Model',...
                'Tooltip',txt,...
                'Style','text',...
                'Position',gridPos{1,8},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Interruptible','off',...
                'Tag','text38',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            pos = gridPos{4,7};
            pos(3) = pos(3)*2;
            
            h35 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Dose Grid Resolution: ',...
                'Tooltip','Set the size of an individual voxel in the dose cube',... 
                'HorizontalAlignment','left',...
                'Style','text',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Interruptible','off',...
                'Tag','text39',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            pos = gridPos{4,1};
            pos(3) = pos(3)*2;
            
            h36 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','3D conformal',...
                'Tooltip','Check this if you want to execute 3D conformal planning',... 
                'Style','radiobutton',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....              
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'Enable','off',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','radiobutton3Dconf' );
              
            pos = gridPos{4,8};
            pos(3) = pos(3)*0.5;
              
            h37 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','5',...
                'Tooltip','Set the size of an individual voxel in the dose cube in x-direction',... 
                'Style','edit',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'Tag','editDoseX',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
              % positioning dose grid size input boxes
              pos(1) = pos(1) + pos(3) + 0.005;
              
              h38 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','5',...
                'Tooltip','Set the size of an individual voxel in the dose cube in y-direction',... 
                'Style','edit',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'Tag','editDoseY',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
              
            pos(1) = pos(1) + pos(3) + 0.005;
              
              h39 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','5',...
                'Tooltip','Set the size of an individual voxel in the dose cube in z-direction',... 
                'Style','edit',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) standardCallback(this,hObject,eventdata),...
                'Tag','editDoseZ',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            pos(1) = pos(1) + pos(3) + 0.005;
            
            h35 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','[mm]',...
                'Tooltip','Set the size of an individual voxel in the dose cube',...
                'HorizontalAlignment','left',...
                'Style','text',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Interruptible','off',...
                'Tag','text39',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
          
             h40 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String','Sequencer : ',...
                'Tooltip','Set the sequencing algorithm',... 
                'HorizontalAlignment','left',...
                'Style','text',...
                'Position',gridPos{4,4},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Interruptible','off',...
                'Tag','txtSequencer',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            txt = sprintf('Choose a sequencing algorithm (siochi, xia or engel)');
            h41 = uicontrol(...
                'Parent',h12,...
                'Units','normalized',...
                'String',{  'siochi','xia','engel' },...
                'Tooltip',txt,...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{5,4},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,....
                'Callback',@(hObject,eventdata) popUpMenuSequencer_Callback(this,hObject,eventdata),...
                'Tag','popUpMenuSequencer',...
                'Enable', 'off',...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
             
            this.createHandles();
        end
       
        function this = setPlnDefaultValues(this)
            
            handles = this.handles;
            
            this.getMachines()

            %
            vChar = get(handles.editGantryAngle,'String');
            if strcmp(vChar(1,1),'0') && length(vChar)==6
              set(handles.editGantryAngle,'String','0');
            end
            vChar = get(handles.editCouchAngle,'String');
            if strcmp(vChar(1,1),'0') && length(vChar)==3
              set(handles.editCouchAngle,'String','0')
            end
            
            % do not calculate / suggest isoCenter new by default
            %this.checkIsoCenter_Callback(handles.checkIsoCenter);
            set(handles.editIsoCenter,'Enable','on');

            this.handles=handles;
            updatePlnInWorkspace(this);
        end
        
        function this = getPlnFromWorkspace(this)
            %TODO: Not entirely sure what is done here
            pln = evalin('base', 'pln');
            handles = this.handles;
            
            
            % sanity check of isoCenter
            if size(pln.propStf.isoCenter,1) ~= pln.propStf.numOfBeams && size(pln.propStf.isoCenter,1) == 1
                pln.propStf.isoCenter = ones(pln.propStf.numOfBeams,1) * pln.propStf.isoCenter(1,:);
            elseif size(pln.propStf.isoCenter,1) ~= pln.propStf.numOfBeams && size(pln.propStf.isoCenter,1) ~= 1
                error('Isocenter in plan file are incosistent.');
            end           
            
            
            set(handles.editBixelWidth,'String',num2str(pln.propStf.bixelWidth));
            set(handles.editGantryAngle,'String',num2str(pln.propStf.gantryAngles));
            set(handles.editCouchAngle,'String',num2str(pln.propStf.couchAngles));
            
            modIx = find(strcmp(pln.radiationMode,this.Modalities));
            set(handles.popupRadMode,'Value',modIx);
            
            getMachines(this);
            modIy = find(strcmp(pln.machine,this.Machines{modIx})); 
            set(handles.popUpMachine,'Value',modIy); 
            
            if isfield(pln.propStf,'isoCenter')
                if size(unique(pln.propStf.isoCenter,'rows'),1) == 1
                    set(handles.editIsoCenter,'String',regexprep(num2str((round(pln.propStf.isoCenter(1,:)*10))./10), '\s+', ' '));
                    set(handles.checkIsoCenter,'Enable','on');
                    if get(handles.checkIsoCenter,'Value')
                        set(handles.editIsoCenter,'Enable','off');
                    else
                        set(handles.editIsoCenter,'Enable','on');
                    end
                    
                else
                    set(handles.editIsoCenter,'String','multiple isoCenter');
                    set(handles.editIsoCenter,'Enable','off');
                    set(handles.checkIsoCenter,'Value',0);
                    set(handles.checkIsoCenter,'Enable','off');
                end
            end
            
            set(handles.editFraction,'String',num2str(pln.numOfFractions));
            
            
            contentPopUp = get(handles.popMenuBioOpt,'String');
            ix = find(strcmp(pln.propOpt.bioOptimization,contentPopUp));
            set(handles.popMenuBioOpt,'Value',ix);
            set(handles.btnRunSequencing,'Value',pln.propSeq.runSequencing);
            set(handles.btnRunDAO,'Value',pln.propOpt.runDAO);
            if isfield(pln.propSeq, 'sequencingLevel')
                set(handles.editSequencingLevel,'String',num2str(pln.propSeq.sequencingLevel));
            end
            if isfield (pln.propOpt, 'conf3D')
                set(handles.radiobutton3Dconf,'Value',pln.propOpt.conf3D);
            end 

            set(handles.editDoseX,'String',num2str(pln.propDoseCalc.doseGrid.resolution.x));
            set(handles.editDoseY,'String',num2str(pln.propDoseCalc.doseGrid.resolution.y));
            set(handles.editDoseZ,'String',num2str(pln.propDoseCalc.doseGrid.resolution.z));

            this.handles=handles;
            this.switchEnables();
        end
        
        %Update the workspace pln from the Widget
        function updatePlnInWorkspace(this)
            this.getMachines();
            handles = this.handles;

            % evalin pln (if existant) in order to decide whether isoCenter should be calculated
            % automatically
            if evalin('base','exist(''pln'',''var'')')
                pln = evalin('base','pln');
            end
            
            pln.propStf.bixelWidth      = this.parseStringAsNum(get(handles.editBixelWidth,'String'),false); % [mm] / also corresponds to lateral spot spacing for particles
            pln.propStf.gantryAngles    = this.parseStringAsNum(get(handles.editGantryAngle,'String'),true); % [???]
            pln.propStf.couchAngles     = this.parseStringAsNum(get(handles.editCouchAngle,'String'),true); % [???]
            pln.propStf.numOfBeams      = numel(pln.propStf.gantryAngles);
            pln.propStf.isoCenter       = this.parseStringAsNum(get(handles.editIsoCenter,'String'),true);
            
            % switch machines depending on radmode selection
            selectedMachine                     = get(handles.popUpMachine,'Value');
            popupMachines                       = get(handles.popUpMachine,'String');
            pln.machine                         = popupMachines{selectedMachine};
            

            pln.propDoseCalc.doseGrid.resolution.x = this.parseStringAsNum(get(handles.editDoseX,'String'),false);
            pln.propDoseCalc.doseGrid.resolution.y = this.parseStringAsNum(get(handles.editDoseY,'String'),false);
            pln.propDoseCalc.doseGrid.resolution.z = this.parseStringAsNum(get(handles.editDoseZ,'String'),false);
                  
            try
                ct = evalin('base','ct');
                pln.numOfVoxels     = prod(ct.cubeDim);
                pln.voxelDimensions = ct.cubeDim;
            catch
            end
            pln.numOfFractions  = this.parseStringAsNum(get(handles.editFraction,'String'),false);
            contents            = get(handles.popupRadMode,'String');
            pln.radiationMode   = contents{get(handles.popupRadMode,'Value')}; % either photons / protons / carbon
            contents            = get(handles.popUpMachine,'String');
            
            if (~strcmp(pln.radiationMode,'photons'))
                contentBioOpt = get(handles.popMenuBioOpt,'String');
                pln.propOpt.bioOptimization = contentBioOpt{get(handles.popMenuBioOpt,'Value'),:};
            else
                pln.propOpt.bioOptimization = 'none';
            end
            
            contents   = get(handles.popUpMenuSequencer,'String');
            pln.propSeq.sequencer = contents{get(handles.popUpMenuSequencer,'Value')};
            pln.propSeq.runSequencing = logical(get(handles.btnRunSequencing,'Value'));
            pln.propSeq.sequencingLevel = this.parseStringAsNum(get(handles.editSequencingLevel,'String'),false);
            pln.propOpt.runDAO = logical(get(handles.btnRunDAO,'Value'));
            pln.propOpt.conf3D = logical(get(handles.radiobutton3Dconf,'Value'));
            
            
            % checkIsoCenter checkbox
            W = evalin('base','whos');
            doesPlnExist = ismember('pln',{W(:).name}) && evalin('base','exist(''cst'')') && evalin('base','exist(''ct'')');
            
            if get(handles.checkIsoCenter,'Value') && doesPlnExist
                try
                    %pln = evalin('base','pln');
                    if ~isfield(pln.propStf,'isoCenter')
                        pln.propStf.isoCenter = NaN;
                    end
                    tmpIsoCenter = matRad_getIsoCenter(evalin('base','cst'),evalin('base','ct'));
                    if ~isequal(tmpIsoCenter,pln.propStf.isoCenter)
                        pln.propStf.isoCenter = ones(pln.propStf.numOfBeams,1)*tmpIsoCenter;
                        %handles.State = 1;
                        %UpdateState(handles);
                    end
                    set(handles.editIsoCenter,'String',regexprep(num2str((round(tmpIsoCenter*10))./10), '\s+', ' '));
                    set(handles.editIsoCenter,'Enable','off')
                    assignin('base','pln',pln);
                catch ME
                    warning(ME.identifier,'could not set isocenter in pln update! Reason: %s\n',ME.message)
                end
            else
                set(handles.editIsoCenter,'Enable','on')
            end
            
            
            % editIsoCenter textbox
            tmpIsoCenter = str2num(get(handles.editIsoCenter,'String'));
            
            if length(tmpIsoCenter) == 3
                if sum(any(unique(pln.propStf.isoCenter,'rows')~=tmpIsoCenter))
                    pln.propStf.isoCenter = ones(pln.propStf.numOfBeams,1)*tmpIsoCenter;
                    %handles.State = 1;
                    %UpdateState(handles);
                end
            else
                handles = showError(this,'EditIsoCenterCallback: Could not set iso center');
            end
            
            if evalin('base','exist(''cst'')')
                try
                    cst = evalin('base','cst');
                    if (sum(strcmp('TARGET',cst(:,3))) > 0 && get(handles.checkIsoCenter,'Value')) || ...
                            (sum(strcmp('TARGET',cst(:,3))) > 0 && ~isfield(pln.propStf,'isoCenter'))
                        pln.propStf.isoCenter = ones(pln.propStf.numOfBeams,1) * matRad_getIsoCenter(cst,ct);
                        set(handles.checkIsoCenter,'Value',1);
                    else
                        if ~strcmp(get(handles.editIsoCenter,'String'),'multiple isoCenter')
                            pln.propStf.isoCenter = ones(pln.propStf.numOfBeams,1) * str2num(get(handles.editIsoCenter,'String'));
                        end
                    end
                catch ME

                    showWarning(this,'Could not set isocenter in pln update! Reason: %s\n',ME.message)  %% showWarning vs warning 
                end
            end
            
            handles.pln = pln;
            assignin('base','pln',pln);
            this.handles = handles;
            %switchEnables(this);
            this.changedWorkspace('pln');                     
        end
    end
    
    methods(Access = private)
        function standardCallback(this, hObject, eventdata)
            %handles = this.handles;
            updatePlnInWorkspace(this);
            
            %this.handles = handles;
        end
        
        function switchEnables(this)
            handles = this.handles;
            hObject = handles.popupRadMode;
            
            contents      = cellstr(get(hObject,'String'));
            RadIdentifier = contents{get(hObject,'Value')};
            contentPopUp  = get(handles.popMenuBioOpt,'String');

            %set handles
            switch RadIdentifier
                case 'photons'
                    
                    set(handles.popMenuBioOpt,'Enable','off');
                    ix = find(strcmp(contentPopUp,'none'));
                    set(handles.popMenuBioOpt,'Value',ix);
                    set(handles.btnSetTissue,'Enable','off');
                    
                    set(handles.btnRunSequencing,'Enable','on');
                    set(handles.btnRunDAO,'Enable','on');
                    set(handles.radiobutton3Dconf,'Enable','on');
                    set(handles.txtSequencing,'Enable','on');
                    set(handles.editSequencingLevel,'Enable','on');    
                    set(handles.popUpMenuSequencer,'Enable','on');
                    set(handles.txtSequencer,'Enable','on');
                    
                    if ~(get(handles.btnRunSequencing,'Value') || get(handles.btnRunDAO,'Value'))
                    
                        set(handles.txtSequencing,'Enable','off');
                        set(handles.editSequencingLevel,'Enable','off');    
                        set(handles.popUpMenuSequencer,'Enable','off');
                        set(handles.txtSequencer,'Enable','off');
                    else 
                        set(handles.txtSequencing,'Enable','on');
                        set(handles.editSequencingLevel,'Enable','on');    
                        set(handles.popUpMenuSequencer,'Enable','on');
                        set(handles.txtSequencer,'Enable','on');
                    end
                    
                case 'protons'                    
                    set(handles.popMenuBioOpt,'Enable','on');
                    set(handles.btnSetTissue,'Enable','on');
                    
                    set(handles.btnRunSequencing,'Enable','off');
                    set(handles.btnRunDAO,'Enable','off');
                    set(handles.radiobutton3Dconf,'Enable','off');
                    set(handles.txtSequencing,'Enable','off');
                    set(handles.editSequencingLevel,'Enable','off');
                    set(handles.popUpMenuSequencer,'Enable','off');
                    set(handles.txtSequencer,'Enable','off');
                    
                case 'carbon'
                    
                    set(handles.popMenuBioOpt,'Enable','on');
                    set(handles.btnSetTissue,'Enable','on');
                    
                    set(handles.btnRunSequencing,'Enable','off');
                    set(handles.btnRunDAO,'Enable','off');
                    set(handles.radiobutton3Dconf,'Enable','off');
                    set(handles.txtSequencing,'Enable','off');
                    set(handles.editSequencingLevel,'Enable','off');  
                    set(handles.popUpMenuSequencer,'Enable','off');
                    set(handles.txtSequencer,'Enable','off');
            end
            
            selectedBioOpt = get(handles.popMenuBioOpt,'Value');
            contentPopUp = get(handles.popMenuBioOpt,'String');
            if strcmp(contentPopUp{selectedBioOpt},'none')
                set(handles.btnSetTissue,'Enable','off');
            else
                set(handles.btnSetTissue,'Enable','on');
            end

            this.handles = handles;
        end
        
        function manageRadModeSpecificDisplay(this)
            handles = this.handles;
            hObject = this.popupRadMode('hObject');
            
            this.handles = handles;
        end
        
        function popupRadMode_Callback(this, hObject, eventdata)
            handles = this.handles;
            contents      = cellstr(get(hObject,'String'));
            RadIdentifier = contents{get(hObject,'Value')};
            contentPopUp  = get(handles.popMenuBioOpt,'String');
            
            switch RadIdentifier
                case 'protons'
                    ix = find(strcmp(contentPopUp,'const_RBExD'));
                    set(handles.popMenuBioOpt,'Value',ix);
                    
                case 'carbon'
                    ix = find(strcmp(contentPopUp,'LEMIV_RBExD'));
                    set(handles.popMenuBioOpt,'Value',ix);
            end
            
            pln = evalin('base','pln');
            
            % new radiation modality is photons -> just keep physicalDose
            if strcmp(contents(get(hObject,'Value')),'photons')
                try
                    AllVarNames = evalin('base','who');
                    if  ismember('resultGUI',AllVarNames)
                        resultGUI = evalin('base','resultGUI');
                        if isfield(resultGUI,'alpha');    resultGUI = rmfield(resultGUI,'alpha');   end
                        if isfield(resultGUI,'beta');     resultGUI = rmfield(resultGUI,'beta');    end
                        if isfield(resultGUI,'RBExDose'); resultGUI = rmfield(resultGUI,'RBExDose');end
                        if isfield(resultGUI,'RBE');      resultGUI = rmfield(resultGUI,'RBE');     end
                        assignin('base','resultGUI',resultGUI);
                        %handles = updateIsoDoseLineCache(handles);
                    end
                catch
                end
            elseif strcmp(contents(get(hObject,'Value')),'protons')
                try
                    AllVarNames = evalin('base','who');
                    if  ismember('resultGUI',AllVarNames)
                        resultGUI = evalin('base','resultGUI');
                        if isfield(resultGUI,'alpha'); resultGUI = rmfield(resultGUI,'alpha');end
                        if isfield(resultGUI,'beta');  resultGUI = rmfield(resultGUI,'beta'); end
                        if isfield(resultGUI,'RBE');   resultGUI = rmfield(resultGUI,'RBE');  end
                        assignin('base','resultGUI',resultGUI);
                        %handles = updateIsoDoseLineCache(handles);
                    end
                catch
                end
            end
            this.handles = handles;
            updatePlnInWorkspace(this);
        end
        

        function popUpMenuSequencer_Callback(this, hObject, eventdata)
            handles = this.handles;
            contents      = cellstr(get(hObject,'String'));
            SeqIdentifier = contents{get(hObject,'Value')};
            contentPopUp  = get(handles.popUpMenuSequencer,'String');
            
            switch SeqIdentifier
                case 'siochi'
                    ix = find(strcmp(contentPopUp,'siochi'));
                    set(handles.popUpMenuSequencer,'Value',ix);
                    
                case 'xia'
                    ix = find(strcmp(contentPopUp,'xia'));
                    set(handles.popUpMenuSequencer,'Value',ix);
                case 'engel'
                    ix = find(strcmp(contentPopUp,'engel'));
                    set(handles.popUpMenuSequencer,'Value',ix);
            end
            
            pln = evalin('base','pln');
            
            
            this.handles = handles;
            updatePlnInWorkspace(this);
        end
        
        function popUpMachine_Callback(this, hObject, eventdata)
            % MOEGLICHER FEHLER WEGEN VALUE WERT!
            handles = this.handles;
             contents = cellstr(get(hObject,'String'));
             MachineIdentifier = contents{get(hObject,'Value')};
            % contentPopUp = get(handles.)
            flag=checkRadiationComposition(this);
            if ~flag
                this.showWarning(['No base data available for machine: ' MachineIdentifier '. Selecting default machine.']);
                set(handles.popUpMachine,'Value',1);
            end
            getMachines(this);
            pln = evalin('base','pln');
            
            % MOEGLICHEE FEHLER HIER VALUE UND GENERIC WERDEN VERGLICHEN
            if strcmp(contents(get(hObject,'Value')),'Generic')
                try
                    AllVarNames = evalin('base','who');
                    if  ismember('resultGUI',AllVarNames)
                        resultGUI = evalin('base','resultGUI');
                        if isfield(resultGUI,'alpha');    resultGUI = rmfield(resultGUI,'alpha');   end
                        if isfield(resultGUI,'beta');     resultGUI = rmfield(resultGUI,'beta');    end
                        if isfield(resultGUI,'RBExDose'); resultGUI = rmfield(resultGUI,'RBExDose');end
                        if isfield(resultGUI,'RBE');      resultGUI = rmfield(resultGUI,'RBE');     end
                        assignin('base','resultGUI',resultGUI);
                        %handles = updateIsoDoseLineCache(handles);
                    end
                catch
                end
            % MOEGLICHEE FEHLER HIER VALUE UND GENERIC WERDEN VERGLICHEN
            elseif strcmp(contents(get(hObject,'Value')),'generic_MCsquare')
                try
                    AllVarNames = evalin('base','who');
                    if  ismember('resultGUI',AllVarNames)
                        resultGUI = evalin('base','resultGUI');
                        if isfield(resultGUI,'alpha'); resultGUI = rmfield(resultGUI,'alpha');end
                        if isfield(resultGUI,'beta');  resultGUI = rmfield(resultGUI,'beta'); end
                        if isfield(resultGUI,'RBE');   resultGUI = rmfield(resultGUI,'RBE');  end
                        assignin('base','resultGUI',resultGUI);
                        %handles = updateIsoDoseLineCache(handles);
                    end
                catch
                end
            end
               
            this.handles = handles;
            updatePlnInWorkspace(this); 
        end
        
        function btnSetTissue_Callback(this, hObject, eventdata)
            handles = this.handles;
            
            if evalin('base','exist(''cst'')') && evalin('base','exist(''pln'')') 
                try
                    %parse variables from base-workspace
                    cst = evalin('base','cst');
                    pln = evalin('base','pln');
                    
                    
                    fileName = [pln.radiationMode '_' pln.machine];
                    load(fileName);
                    
                    % check for available cell types characterized by alphaX and betaX
                    for i = 1:size(machine.data(1).alphaX,2)
                        CellType{i} = [num2str(machine.data(1).alphaX(i)) ' ' num2str(machine.data(1).betaX(i))];
                    end
                    
                    %fill table data array
                    for i = 1:size(cst,1)
                        data{i,1} = cst{i,2};
                        data{i,2} = [num2str(cst{i,5}.alphaX) ' ' num2str(cst{i,5}.betaX)];
                        data{i,3} = (cst{i,5}.alphaX / cst{i,5}.betaX );
                    end
                    
                    Width  = 400;
                    Height = 200 + 20*size(data,1);
                    ScreenSize = get(0,'ScreenSize');
                    % show "set tissue parameter" window
                    figHandles = get(0,'Children');
                    if ~isempty(figHandles)
                        IdxHandle = strcmp(get(figHandles,'Name'),'Set Tissue Parameters');
                    else
                        IdxHandle = [];
                    end
                    
                    %check if window is already exists
                    if any(IdxHandle)
                        IdxTable = find(strcmp({figHandles(IdxHandle).Children.Type},'uitable'));
                        set(figHandles(IdxHandle).Children(IdxTable), 'Data', []);
                        figTissue = figHandles(IdxHandle);
                        %set focus
                        figure(figTissue);
                    else
                        figTissue = figure('Name','Set Tissue Parameters','Color',[.5 .5 .5],'NumberTitle','off','Position',...
                            [ceil(ScreenSize(3)/2) ceil(ScreenSize(4)/2) Width Height]);
                    end
                    
                    % define the tissue parameter table
                    cNames = {'VOI','alphaX betaX','alpha beta ratio'};
                    columnformat = {'char',CellType,'numeric'};
                    
                    tissueTable = uitable('Parent', figTissue,'Data', data,'ColumnEditable',[false true false],...
                        'ColumnName',cNames, 'ColumnFormat',columnformat,'Position',[50 150 10 10]);
                    set(tissueTable,'CellEditCallback',@(hObject,eventdata) tissueTable_CellEditCallback(this,hObject,eventdata));
                    % set width and height
                    currTablePos = get(tissueTable,'Position');
                    currTableExt = get(tissueTable,'Extent');
                    currTablePos(3) = currTableExt(3);
                    currTablePos(4) = currTableExt(4);
                    set(tissueTable,'Position',currTablePos);
                    
                    % define two buttons with callbacks
                    uicontrol('Parent', figTissue,'Style', 'pushbutton', 'String', 'Save&Close',...
                        'Position', [Width-(0.25*Width) 0.1 * Height 70 30],...
                        'Callback', @(hpb,eventdata)SaveTissueParameters(this,hpb,eventdata));
                    
                    uicontrol('Parent', figTissue,'Style', 'pushbutton', 'String', 'Cancel&Close',...
                        'Position', [Width-(0.5*Width) 0.1 * Height 80 30],...
                        'Callback', 'close');
                catch ME
                    warning(ME.identifier,'Could not set isocenter in pln update! Reason: %s\n',ME.message)
                end
            end
            this.handles = handles;
            %updatePlnInWorkspace(this);
        end
        
        function popMenuBioOpt_Callback(this, hObject, eventdata) %unused arguments?
            handles = this.handles;
            
            pln = evalin('base','pln');
            contentBioOpt = get(handles.popMenuBioOpt,'String');
            NewBioOptimization = contentBioOpt(get(handles.popMenuBioOpt,'Value'),:);
            
                if (strcmp(pln.propOpt.bioOptimization,'LEMIV_effect') && strcmp(NewBioOptimization,'LEMIV_RBExD')) ||...
                        (strcmp(pln.propOpt.bioOptimization,'LEMIV_RBExD') && strcmp(NewBioOptimization,'LEMIV_effect'))
                    % do nothing - re-optimization is still possible
                elseif ((strcmp(pln.propOpt.bioOptimization,'const_RBE') && strcmp(NewBioOptimization,'none')) ||...
                        (strcmp(pln.propOpt.bioOptimization,'none') && strcmp(NewBioOptimization,'const_RBE'))) && isequal(pln.radiationMode,'protons')
                    % do nothing - re-optimization is still possible
                end
                
            this.handles = handles;
            updatePlnInWorkspace(this);
        end
                   
        function getMachines(this)
            matRad_cfg = MatRad_Config.instance();
            %seach for availabes machines
            handles = this.handles;
            this.Machines=cell(size(this.Modalities));
            %Loop over all modalities to find machine per modalitiy
            for i = 1:length(this.Modalities)
                pattern = [this.Modalities{1,i} '_*'];
                if isdeployed
                    baseroot = [ctfroot filesep 'matRad'];
                else
                    baseroot = matRad_cfg.matRadRoot; 
                end
                Files = dir([baseroot filesep 'basedata' filesep pattern]);
                
                for j = 1:length(Files)
                    if ~isempty(Files)
                        MachineName = Files(j).name(numel(this.Modalities{1,i})+2:end-4);
                        this.Machines{i}{j} = MachineName;
                    end
                end
            end
            
            selectedRadMod = get(handles.popupRadMode,'Value');
            nMachines = numel(this.Machines{selectedRadMod});
            selectedMachine = get(handles.popUpMachine,'Value');
            
            if get(handles.popUpMachine,'Value') > nMachines
                selectedMachine = 1;
            end            
            
            set(handles.popUpMachine,'Value',selectedMachine,'String',this.Machines{selectedRadMod});
            this.handles = handles;
        end
        
        function number = parseStringAsNum(this,stringIn,isVector)
            if isnumeric(stringIn)
                number = stringIn;
            else
                number = str2num(stringIn);
                if isempty(number) || length(number) > 1 && ~isVector
                    warndlg(['could not parse all parameters (pln, optimization parameter)']);
                    number = NaN;
                elseif isVector && iscolumn(number)
                    number = number';
                end
            end
        end
        
        function flag = checkRadiationComposition(this)
            handles = this.handles;
            
            flag = true;
            contents = cellstr(get(handles.popUpMachine,'String'));
            Machine = contents{get(handles.popUpMachine,'Value')};
            contents = cellstr(get(handles.popupRadMode,'String'));
            radMod = contents{get(handles.popupRadMode,'Value')};
            
            if isdeployed
                baseroot = [ctfroot filesep 'matRad'];
            else
                baseroot = [fileparts(mfilename('fullpath')) filesep '..'];
            end
            FoundFile = dir([baseroot filesep 'basedata' filesep  radMod '_' Machine '.mat']);
            
            if isempty(FoundFile)
              %  this.showWarning(['No base data available for machine: ' Machine '. Selecting default machine.']);
                flag = false;
              %  set(handles.popUpMachine,'Value',1);
            end
            this.handles = handles;
        end
        
        function SaveTissueParameters(this,~, ~)
            cst = evalin('base','cst');
            % get handle to uiTable
            figHandles = get(0,'Children');
            IdxHandle  = find(strcmp(get(figHandles,'Name'),'Set Tissue Parameters'));
            % find table in window
            
            figHandleChildren = get(figHandles(IdxHandle),'Children');
            IdxTable   = find(strcmp(get(figHandleChildren,'Type'),'uitable'));
            uiTable    = figHandleChildren(IdxTable);
            % retrieve data from uitable
            data       = get(uiTable,'data');
            
            for i = 1:size(cst,1)
                for j = 1:size(data,1)
                    if strcmp(cst{i,2},data{j,1})
                        alphaXBetaX = str2num(data{j,2});
                        cst{i,5}.alphaX = alphaXBetaX(1);
                        cst{i,5}.betaX  = alphaXBetaX(2);
                    end
                end
            end
            assignin('base','cst',cst);
            close
            %handles.State = 2;
            %UpdateState(handles);
            
            %this.handles = handles;
            updatePlnInWorkspace(this); 
        end
        
        function tissueTable_CellEditCallback(this,hObject, eventdata)
            if eventdata.Indices(2) == 2
                alphaXBetaX = str2num(eventdata.NewData);
                data = get(hObject,'Data');
                data{eventdata.Indices(1),3} = alphaXBetaX(1)/alphaXBetaX(2);
                set(hObject,'Data',data);
            end
        end
        
            
    end
end
