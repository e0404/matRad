classdef matRad_VisualizationWidget < matRad_Widget
    % matRad_VisualizationWidget class to generate GUI widget to set
    % viewing options
    % 
    %
    % References
    %   -
    %
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    % Copyright 2020 the matRad development team. 
    % 
    % This file is part of the matRad project. It is subject to the license 
    % terms in the LICENSE file found in the top-level directory of this 
    % distribution and at https://github.com/e0404/matRad/LICENSES.txt. No part 
    % of the matRad project, including this file, may be copied, modified, 
    % propagated, or distributed except according to the terms contained in the 
    % LICENSE file.
    %
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    properties
        viewingWidgetHandle;
         dvhStatWidgetHandle;

    end
    
    methods
        function this = matRad_VisualizationWidget(viewingWidgetHandle,handleParent)
            if nargin < 2
                matRad_cfg = MatRad_Config.instance();
                handleParent = figure(...
                    'Units','characters',...
                    'Position',[170 45 140 15],...
                    'Visible','on',...
                    'Color',matRad_cfg.gui.backgroundColor,... 'CloseRequestFcn',@(hObject,eventdata) figure1_CloseRequestFcn(this,hObject,eventdata),...
                    'IntegerHandle','off',...
                    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
                    'MenuBar','none',...
                    'Name','MatRad Visualization',...
                    'NumberTitle','off',...
                    'HandleVisibility','callback',...
                    'Tag','figure1');
                
            end
            this = this@matRad_Widget(handleParent);  
            
            handles=this.handles;
            
            if nargin>=1
                this.viewingWidgetHandle=viewingWidgetHandle;
            else
                set(handles.btnDVH,'Enable','off');
                set(handles.popupDisplayOption,'Enable','off');
                set(handles.popupProfileType,'Enable','off');
                set(handles.popupTypeOfPlot,'Enable','off');
                set(handles.popupPlane,'Enable','off');
                set(handles.radiobtnCT,'Enable','off');
                set(handles.radiobtnContour,'Enable','off');
                set(handles.radiobtnDose,'Enable','off');
                set(handles.radiobtnIsoDoseLines,'Enable','off');
                set(handles.sliderSlice,'Enable','off');
                set(handles.radiobtnIsoDoseLinesLabels,'Enable','off');
                set(handles.radioBtnIsoCenter,'Enable','off');
                set(handles.radiobtnPlan,'Enable','off');
                set(handles.btn3Dview,'Enable','off');
            end
            this.handles = handles;
        end
        
        
        function this = initialize(this)
            
        end
                         
%         function viewingWidgetHandle=get.viewingWidgetHandle(this)
%             viewingWidgetHandle=this.viewingWidgetHandle;
%         end
        
        function set.viewingWidgetHandle(this,value)
            if isa(value,'matRad_ViewingWidget')
                this.viewingWidgetHandle=value;
                
                % get the default values from the viewer widget      
                this.getFromViewingWidget();
                
            else
                handles=this.handles;
                % disable all buttons
                set(handles.popupDisplayOption,'Enable','off');
                set(handles.popupProfileType,'Enable','off');
                set(handles.popupTypeOfPlot,'Enable','off');
                set(handles.popupPlane,'Enable','off');
                set(handles.radiobtnCT,'Enable','off');
                set(handles.radiobtnContour,'Enable','off');
                set(handles.radiobtnDose,'Enable','off');
                set(handles.radiobtnIsoDoseLines,'Enable','off');
                set(handles.sliderSlice,'Enable','off');
                set(handles.radiobtnIsoDoseLinesLabels,'Enable','off');
                set(handles.radioBtnIsoCenter,'Enable','off');
                set(handles.radiobtnPlan,'Enable','off');
                this.handles=handles;
            end
        end
    end
    
    methods (Access = protected)
        function this = createLayout(this)
            h36 = this.widgetHandle;
            
            matRad_cfg = MatRad_Config.instance();
            
            %Create Main Grid layout
            gridSize = [7 4];
            elSize = [0.9 0.6];
            [i,j] = ndgrid(1:gridSize(1),1:gridSize(2));
            gridPos = arrayfun(@(i,j) computeGridPos(this,[i j],gridSize,elSize),i,j,'UniformOutput',false);
            
            %First column
            h40 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Slice Selection',...
                'Tooltip','Choose which slice should be displayed in intensity plots',...
                'Style','text',...
                'Position',gridPos{1,1},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','textSliceSelection');
            
            h48 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Beam Selection',...
                'Tooltip','Choose which beam should be displayed in profile plots',...
                'Style','text',...
                'Position',gridPos{1,2},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtBeamSelection' );
            
             h54 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Offset',...
                'Tooltip','Define an offset value for profile plots',...
                'Style','text',...
                'Position',gridPos{1,3},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','textOffset');
            
            %Second Column (Sliders)
            h38 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','Slider',...
                'Tooltip','Choose which slice should be displayed in intensity plots',...
                'Style','slider',...
                'Callback',@(hObject,eventdata) sliderSlice_Callback(this,hObject,eventdata),...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'Position',gridPos{2,1},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','sliderSlice');
            
            h49 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','SliderBeamSelection',...
                'Tooltip','Choose which beam should be displayed in profile plots',...
                'Style','slider',...
                'BackgroundColor',[0.9 0.9 0.9],...
                'Callback',@(hObject,eventdata) sliderBeamSelection_Callback(this,hObject,eventdata),...
                'Enable','off',...
                'Position',gridPos{2,2},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','sliderBeamSelection');
            
            h55 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','SliderOffset',...
                'Tooltip','Define an offset value for profile plots',...
                'Style','slider',...
                'Position',gridPos{2,3},...
                'BackgroundColor',[0.9 0.9 0.9],...
                'Callback',@(hObject,eventdata) sliderOffset_Callback(this,hObject,eventdata),...
                'Enable','off',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','sliderOffset');
           h25 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','Recenter',...
                'Tooltip','Recenter viewing widget to isocenter',...
                'Position',gridPos{2,4},...
                'BackgroundColor',[0.8 0.8 0.8],...
                'Callback',@(hObject,eventdata) btnRecenter_Callback(this,hObject,eventdata),...
                'Enable','off',...
                'Tag','btnRecenter',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            %Third Column
            h44 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Type of plot',...
                'Tooltip','Display intensity or profile plot',...
                'Style','text',...
                'Position',gridPos{3,1},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtTypeOfPlot' );
    
            h39 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','Plane Selection',...
                'Tooltip','Display coronal, sagital or axial plane in intensity plots',...
                'Style','text',...
                'Position',gridPos{3,2},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtPlanSelection');
            
            h46 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Display option',...
                'Tooltip','Select the result distribution which should be displayed',...
                'Style','text',...
                'Position',gridPos{3,3},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtDisplayOption' );
            
            %Fourth Column
            
            h45 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String',{  'intensity'; 'profile' },...
                'Tooltip','Display intensity or profile plot',...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{4,1},...
                'Callback',@(hObject,eventdata) popupTypeOfPlot_Callback(this,hObject,eventdata),...
                'Tag','popupTypeOfPlot',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            h37 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String',{  'coronal'; 'sagital'; 'axial' },...
                'Tooltip','Display coronal, sagital or axial plane in intensity plots',...
                'Style','popupmenu',...
                'Value',3,...
                'Position',gridPos{4,2},...
                'Callback',@(hObject,eventdata) popupPlane_Callback(this,hObject,eventdata),...
                'Tag','popupPlane',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            h47 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','Please select...',...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{4,3},...
                'Callback',@(hObject,eventdata)popupDisplayOption_Callback(this,hObject,eventdata),...
                'Tag','popupDisplayOption',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            %Fifth Column
            h50 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String',{'depth','lateral'},...
                'Tooltip','Select which 1D profile through the isocenter you would like to see',...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{5,1},...
                'Callback',@(hObject,eventdata) popupProfileType_Callback(this,hObject,eventdata),...
                'Tag','popupProfileType',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            %{
            %Old display with button
            pos = gridPos{5,1};
            pos(3) = pos(3)*0.4975;
            h51 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','Profile:',...
                'Tooltip','Display depth or lateral profile',...
                'Style','text',...
                'Position',pos,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','text16' );
            
            pos = gridPos{5,1};
            pos(3) = pos(3)*0.4975;
            pos(1) = pos(1) + pos(3) + 0.0025;
            
            h50 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','lateral',...
                'Tooltip','Display depth or lateral profile',...
                'Position',pos,...
                'Callback',@(hObject,eventdata) popupProfileType_Callback(this,hObject,eventdata),...
                'Enable','off',...
                'Tag','popupProfileType',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            %}
            
            
            h57 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','Open 3D-View',...
                'Tooltip','Get a 3 dimensional illustration of the patient',...
                'Position',gridPos{5,2},...
                'Callback',@(hObject,eventdata) btn3Dview_Callback(this,hObject,eventdata),...
                'Enable','off',...
                'Tag','btn3Dview',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            h52 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','Show DVH/QI',...
                'Tooltip','Render the dose volume histogram along with quality indicators',...
                'Position',gridPos{5,3},...                
                'Callback',@(hObject,eventdata) btnDVH_Callback(this,hObject,eventdata),...
                'Enable','off',...
                'Tag','btnDVH',...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight);
            
            %Sixth Column
            %Recompute Grid to allow 7 rows
            gridSize = [7 7];
            elSize = [0.9 0.6];
            [i,j] = ndgrid(1:gridSize(1),1:gridSize(2));
            newPos = arrayfun(@(i,j) computeGridPos(this,[i j],gridSize,elSize),i,j,'UniformOutput',false);
            
            %We need only the 6th col and make it double wide
            newPos = newPos(6,:);
            newPos = cellfun(@(pos) pos .* [1 1 2 1],newPos,'UniformOutput',false);
            
            h58 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','plot CT',...
                'Tooltip','If this checked, the CT is displayed',...
                'Style','radiobutton',...
                'Value',1,...
                'Position',newPos{1},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata) radiobtnCT_Callback(this,hObject,eventdata),...
                'Tag','radiobtnCT');
            
            h41 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','plot contour',...
                'Tooltip','If this checked, the contours of the VOIs are displayed',...
                'Style','radiobutton',...
                'Value',1,...
                'Position',newPos{2},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata) radiobtnContour_Callback(this,hObject,eventdata),...
                'Tag','radiobtnContour' );
            
            h42 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','plot dose',...
                'Tooltip','If this checked, the optimized distribution is displayed',...
                'Style','radiobutton',...
                'Value',1,...
                'Position',newPos{3},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata) radiobtnDose_Callback(this,hObject,eventdata),...
                'Tag','radiobtnDose' );
              
            h43 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','plot isolines',...
                'Tooltip','If this checked, isolines are displayed',...
                'Style','radiobutton',...
                'Value',1,...
                'Position',newPos{4},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata) radiobtnIsoDoseLines_Callback(this,hObject,eventdata),...
                'Tag','radiobtnIsoDoseLines');            
            
            h53 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','plot isolines labels',...
                'Tooltip','If this checked, isoline labels are displayed',...
                'Style','radiobutton',...
                'Position',newPos{5},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata) radiobtnIsoDoseLinesLabels_Callback(this,hObject,eventdata),...
                'Tag','radiobtnIsoDoseLinesLabels');
     
            h56 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','plot iso center',...
                'Tooltip','If this checked, the iso center is displayed',...
                'Style','radiobutton',...
                'Value',1,...
                'Position',newPos{6},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata) radioBtnIsoCenter_Callback(this,hObject,eventdata),...
                'Tag','radioBtnIsoCenter');
                     
            h59 = uicontrol(...
                'Parent',h36,...
                'Units','normalized',...
                'String','visualize plan/beams',...
                'Tooltip','If this checked, the beam angles are displayed',...
                'Style','radiobutton',...
                'Value',1,...
                'Position',newPos{7},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata) radiobtnPlan_Callback(this,hObject,eventdata),...
                'Tag','radiobtnPlan');
            
            
            this.createHandles();
        end

        function this = doUpdate(this,~)
            if isa(this.viewingWidgetHandle,'matRad_ViewingWidget')                
                % get the default values from the viewer widget
                this.getFromViewingWidget();
            else
                handles = this.handles;
                % disable all buttons
                set(handles.popupDisplayOption,'Enable','off');
                set(handles.popupProfileType,'Enable','off');
                set(handles.popupTypeOfPlot,'Enable','off');
                set(handles.popupPlane,'Enable','off');
                set(handles.radiobtnCT,'Enable','off');
                set(handles.radiobtnContour,'Enable','off');
                set(handles.radiobtnDose,'Enable','off');
                set(handles.radiobtnIsoDoseLines,'Enable','off');
                set(handles.sliderSlice,'Enable','off');
                set(handles.radiobtnIsoDoseLinesLabels,'Enable','off');
                set(handles.radioBtnIsoCenter,'Enable','off');
                set(handles.radiobtnPlan,'Enable','off');
                this.handles = handles;
            end
        end
    end
    
    methods (Access = protected)
        function getFromViewingWidget(this)
            handles = this.handles;
            if strcmp(this.viewingWidgetHandle.ProfileType,'lateral')
                set(handles.popupProfileType,'Value',2);
            else
                set(handles.popupProfileType,'Value',1);
            end
            
            set(handles.popupTypeOfPlot,'Value',this.viewingWidgetHandle.typeOfPlot);
            set(handles.popupPlane,'Value',this.viewingWidgetHandle.plane);
            set(handles.radiobtnContour,'Value',this.viewingWidgetHandle.plotContour);
            set(handles.radiobtnDose,'Value',this.viewingWidgetHandle.plotDose);
            set(handles.radiobtnIsoDoseLines,'Value',this.viewingWidgetHandle.plotIsoDoseLines);
            set(handles.radiobtnIsoDoseLinesLabels,'Value',this.viewingWidgetHandle.plotIsoDoseLinesLabels);
            set(handles.radioBtnIsoCenter,'Value',this.viewingWidgetHandle.plotIsoCenter);
            set(handles.radiobtnPlan,'Value',this.viewingWidgetHandle.plotPlan);
            
            % update the sliders 
            set(handles.sliderSlice,'Min',1,'Max',this.viewingWidgetHandle.maxSlice,...
                'Value', this.viewingWidgetHandle.slice, ...
                'SliderStep',this.viewingWidgetHandle.SliceSliderStep);
            
            if this.viewingWidgetHandle.numOfBeams>1
                set(handles.sliderBeamSelection,'Min',1,'Max',this.viewingWidgetHandle.numOfBeams,...
                    'Value',this.viewingWidgetHandle.selectedBeam,...
                    'SliderStep',[1/(this.viewingWidgetHandle.numOfBeams-1) 1/(this.viewingWidgetHandle.numOfBeams-1)]);
            else
                set(handles.sliderBeamSelection,'Min',1,'Max',1, 'Value',1,'SliderStep',[1 1]);
            end
           
            set(handles.sliderOffset,'Min',this.viewingWidgetHandle.OffsetMinMax(1),'Max',this.viewingWidgetHandle.OffsetMinMax(2),...
                'Value',this.viewingWidgetHandle.profileOffset,...
                'SliderStep',this.viewingWidgetHandle.OffsetSliderStep);
            
            set(handles.popupDisplayOption,'String',this.viewingWidgetHandle.SelectedDisplayAllOptions);
            if ~strcmp(this.viewingWidgetHandle.SelectedDisplayOption,'')
                set(handles.popupDisplayOption,'Value',find(strcmp(this.viewingWidgetHandle.SelectedDisplayOption,this.viewingWidgetHandle.SelectedDisplayAllOptions)));
            end
            
            if strcmp(this.viewingWidgetHandle.SelectedDisplayOption,'') % no data is loaded
                % disable 3D and DVH button
                set(handles.btn3Dview,'Enable','off');
                set(handles.btnDVH,'Enable','off');
            else
                set(handles.btn3Dview,'Enable','on');
                
                if evalin('base','exist(''resultGUI'')')
                    set(handles.btnDVH,'Enable','on');
                else
                    set(handles.btnDVH,'Enable','off');
                end
                
                 %% enable and diasble buttons according to type of plot
                % intensity plot
                if this.viewingWidgetHandle.typeOfPlot == 1
                    
                    set(handles.sliderBeamSelection,'Enable','off')
                    set(handles.sliderOffset,'Enable','off')
                    set(handles.popupDisplayOption,'Enable','on')
                    set(handles.popupProfileType,'Enable','off');
                    set(handles.popupPlane,'Enable','on');
                    set(handles.radiobtnCT,'Enable','on');
                    set(handles.radiobtnContour,'Enable','on');
                    set(handles.radiobtnDose,'Enable','on');
                    set(handles.radiobtnIsoDoseLines,'Enable','on');
                    set(handles.radiobtnIsoDoseLinesLabels,'Enable','on');
                    set(handles.sliderSlice,'Enable','on');
                    set(handles.btnRecenter, 'Enable','on');

                    % profile plot
                elseif this.viewingWidgetHandle.typeOfPlot == 2
                    
                    set(handles.popupDisplayOption,'Enable','on');
                    set(handles.popupProfileType,'Enable','on');
                    set(handles.popupPlane,'Enable','off');
                    set(handles.radiobtnCT,'Enable','off');
                    set(handles.radiobtnContour,'Enable','off');
                    set(handles.radiobtnDose,'Enable','off');
                    set(handles.radiobtnIsoDoseLines,'Enable','off');
                    set(handles.sliderSlice,'Enable','off');
                    set(handles.radiobtnIsoDoseLinesLabels,'Enable','off');
                    set(handles.popupProfileType,'Enable','on');
                    set(handles.btnRecenter, 'Enable','off');
                end
                
            end
            this.handles = handles;
        end        
        
         % H37 Calback
        function popupPlane_Callback(this, hObject, event)
            % hObject    handle to popupPlane (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: contents = cellstr(get(hObject,'String')) returns popupPlane contents as cell array
            %        contents{get(hObject,'Value')} returns selected item from popupPlane
            
            % set slice slider
            handles = this.handles;
            this.viewingWidgetHandle.plane = get(handles.popupPlane,'value');
            this.handles = handles;
        end
        
         %45 Callback
        function popupTypeOfPlot_Callback(this, hObject, event)
            this.viewingWidgetHandle.typeOfPlot = get(hObject,'Value');
            handles = this.handles;
            
            % intensity plot
            if get(hObject,'Value') == 1
                
                set(handles.sliderBeamSelection,'Enable','off')
                set(handles.sliderOffset,'Enable','off')
                set(handles.popupDisplayOption,'Enable','on')
                set(handles.popupProfileType,'Enable','off');
                set(handles.popupPlane,'Enable','on');
                set(handles.radiobtnCT,'Enable','on');
                set(handles.radiobtnContour,'Enable','on');
                set(handles.radiobtnDose,'Enable','on');
                set(handles.radiobtnIsoDoseLines,'Enable','on');
                set(handles.radiobtnIsoDoseLinesLabels,'Enable','on');
                set(handles.sliderSlice,'Enable','on');
                
                % profile plot
            elseif get(hObject,'Value') == 2   
                     
                if evalin('base','exist(''pln'')') && evalin('base','exist(''ct'')')
                    if this.viewingWidgetHandle.numOfBeams>1
                        set(handles.sliderBeamSelection,'Enable','on');
                    end
                    set(handles.sliderOffset,'Enable','on');
                end
                                
                set(handles.popupDisplayOption,'Enable','on');
                set(handles.popupProfileType,'Enable','on');
                set(handles.popupPlane,'Enable','off');
                set(handles.radiobtnCT,'Enable','off');
                set(handles.radiobtnContour,'Enable','off');
                set(handles.radiobtnDose,'Enable','off');
                set(handles.radiobtnIsoDoseLines,'Enable','off');
                set(handles.sliderSlice,'Enable','off');
                set(handles.radiobtnIsoDoseLinesLabels,'Enable','off');
                  
                set(handles.popupProfileType,'Enable','on')

%                 end
            end
            

            
            this.handles = handles;
        end
        
          % 47 Callback
        function popupDisplayOption_Callback(this, hObject, event)
            %this.updateIsodoseLine();
            content = get(hObject,'String');
            if strcmp(content,'no option available')
                return
            end
            
            handles = this.handles;
            this.viewingWidgetHandle.SelectedDisplayOption = content{get(hObject,'Value'),1};
            this.handles = handles;
            % if matRad Plan Analysis exists use that
            fh = findobj( 'Type', 'Figure', 'Name', 'MatRad Plan Analysis' ); 
            if ~isempty(fh)
                this.dvhStatWidgetHandle.selectedDisplayOption = content{get(hObject,'Value'),1};
            end
             

        end
        
        % H49 Callback
        function sliderBeamSelection_Callback(this, hObject, event)
            % hObject    handle to sliderBeamSelection (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: get(hObject,'Value') returns position of slider
            %        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
            
            handles = this.handles;
            this.viewingWidgetHandle.selectedBeam = round(get(hObject,'Value'));
            set(hObject, 'Value', this.viewingWidgetHandle.selectedBeam);
%             handles.rememberCurrAxes = false;
%             UpdatePlot(handles);
%             handles.rememberCurrAxes = true;
            
            this.handles = handles;
        end
         
         % 50 Callback
        function popupProfileType_Callback(this, hObject, event)
            % hObject    handle to popupProfileType (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            %handles = this.handles;
            
            val = get(hObject,'Value');
            
            switch val
                case 1
                    this.viewingWidgetHandle.ProfileType = 'longitudinal';
                case 2
                    this.viewingWidgetHandle.ProfileType = 'lateral';
                otherwise
                    this.showError('Invalid selection for Profile Plot!');                
            end
            %this.handles = handles;
        end
         
        % 52 Callback
        function btnDVH_Callback(this, hObject, event)
            this.dvhStatWidgetHandle = matRad_DVHStatsWidget(this.viewingWidgetHandle.SelectedDisplayOption); % pass fieldname in resultGUI
        end
        
        %H55 Callback
        function sliderOffset_Callback(this, hObject, event)
            this.viewingWidgetHandle.profileOffset = get(hObject,'Value');
            %UpdatePlot(handles);
        end
       
        % 57 Callback
        function btn3Dview_Callback(this,hObject, event)            
            matRad_3DWidget(this.viewingWidgetHandle);
        end
       % --- Executes on button press in radiobtnContour.
       function radiobtnContour_Callback(this,hObject, ~)
           % hObject    handle to radiobtnContour (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           
           % Hint: get(hObject,'Value') returns toggle state of radiobtnContour
           %UpdatePlot(handles)
           this.viewingWidgetHandle.plotContour = get(hObject,'Value');
       end
       % --- Executes on slider movement.
       function sliderSlice_Callback(this,hObject, ~)
           % hObject    handle to sliderSlice (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           
           % Hints: get(hObject,'Value') returns position of slider
           %        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
           %UpdatePlot(handles)
           
           this.viewingWidgetHandle.slice = round(get(hObject,'Value'));
       end
       
       function radiobtnCT_Callback(this,hObject, ~)
           % hObject    handle to radiobtnCT (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           
           % Hint: get(hObject,'Value') returns toggle state of radiobtnCT
           %UpdatePlot(handles)
           this.viewingWidgetHandle.plotCT = get(hObject,'Value');
       end
       
       % --- Executes on button press in radiobtnPlan.
       function radiobtnPlan_Callback(this,hObject, ~)
           % hObject    handle to radiobtnPlan (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           
           % Hint: get(hObject,'Value') returns toggle state of radiobtnPlan
           %UpdatePlot(handles)
           this.viewingWidgetHandle.plotPlan = get(hObject,'Value');
       end
       
       % --- Executes on button press in radiobtnIsoDoseLines.
       function radiobtnIsoDoseLines_Callback(this,hObject, ~)
           % hObject    handle to radiobtnIsoDoseLines (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           
           % Hint: get(hObject,'Value') returns toggle state of radiobtnIsoDoseLines
           this.viewingWidgetHandle.plotIsoDoseLines = get(hObject,'Value');

       end
       
       % --- Executes on button press in radiobtnDose.
       function radiobtnDose_Callback(this,hObject, ~)
           % hObject    handle to radiobtnDose (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           
           % Hint: get(hObject,'Value') returns toggle state of radiobtnDose
           %UpdatePlot(handles)
           this.viewingWidgetHandle.plotDose=get(hObject,'Value');
       end
       
       % radio button: plot isolines labels
       function radiobtnIsoDoseLinesLabels_Callback(this,hObject, ~)
           %UpdatePlot(handles);
           this.viewingWidgetHandle.plotIsoDoseLinesLabels = get(hObject,'Value');
       end
       
       % --- Executes on button press in radioBtnIsoCenter.
       function radioBtnIsoCenter_Callback(this,hObject, eventdata)
           % hObject    handle to radioBtnIsoCenter (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           %UpdatePlot(handles)
           % Hint: get(hObject,'Value') returns toggle state of radioBtnIsoCenter
           this.viewingWidgetHandle.plotIsoCenter = get(hObject,'Value');
       end     

       % --- Executes on button press in btnRecenter
       % currently imlpemented for one single isocenter for all beams
       function btnRecenter_Callback(this,hObject, eventdata)
           % hObject    handle to radioBtnIsoCenter (see GCBO)
           % eventdata  reserved - to be defined in a future version of MATLAB
           % handles    structure with handles and user data (see GUIDATA)
           %UpdatePlot(handles)
           % Hint: get(hObject,'Value') returns toggle state of radioBtnIsoCenter
           
           isoSlice = this.viewingWidgetHandle.vIsoCenter(this.viewingWidgetHandle.plane);
           this.viewingWidgetHandle.slice = isoSlice;
       end

    end
end
