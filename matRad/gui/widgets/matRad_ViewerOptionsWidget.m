classdef matRad_ViewerOptionsWidget < matRad_Widget
    % matRad_ViewerOptionsWidget class to generate GUI widget to set
    % options for the plan ViewingWidget
    % 
    % References
    %   -
    %
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    % Copyright 2020 the matRad development team. 
    % 
    % This file is part of the matRad project. It is subject to the license 
    % terms in the LICENSE file found in the top-level directory of this 
    % distribution and at https://github.com/e0404/matRad/LICENSE.md. No part 
    % of the matRad project, including this file, may be copied, modified, 
    % propagated, or distributed except according to the terms contained in the 
    % LICENSE file.
    %
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    properties
        viewingWidgetHandle = [];
        colormapLocked = false;
        windowPresets;
    end
    
    methods
        function this = matRad_ViewerOptionsWidget(handleParent)
            matRad_cfg = MatRad_Config.instance();
            if nargin < 1
                handleParent = figure(...
                    'Units','characters',...
                    'Position',[170 15 30 30],...
                    'Visible','on',...
                    'Color',matRad_cfg.gui.backgroundColor,...
                    'IntegerHandle','off',...
                    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
                    'MenuBar','none',...
                    'Name','MatRad Viewer Options',...
                    'NumberTitle','off',...
                    'HandleVisibility','callback',...
                    'Tag','menuViewerOption');
                
            end
            this = this@matRad_Widget(handleParent);
            
            handles = this.handles;
            
            %Set up the colormap selection box
            availableColormaps = matRad_getColormap();
            set(handles.popupmenu_chooseColormap,'String',availableColormaps);
            
            % setup ct window list
            % data and values from CERR https://github.com/adityaapte/CERR
            windowNames = {'Custom','Full','Abd/Med', 'Head', 'Liver', 'Lung', 'Spine', 'Vrt/Bone'};
            windowCenter = {NaN, NaN, -10, 45, 80, -500, 30, 400};
            windowWidth = {NaN, NaN, 330, 125, 305, 1500, 300, 1500};
            windowPresets = cell2struct([windowNames', windowCenter', windowWidth'], {'name', 'center', 'width'},2);
            
            
            this.windowPresets = windowPresets;
            
            selectionList = {windowPresets(:).name};
            set(handles.popupmenu_windowPreset,'String',selectionList(:));
            set(handles.popupmenu_windowPreset,'Value',1);
            
            this.handles=handles;
            
            UpdateButtonState(this,'off');
        end
        
        function this = initialize(this)            
        end
                
        %         function viewingWidgetHandle=get.viewingWidgetHandle(this)
        %             viewingWidgetHandle=this.viewingWidgetHandle;
        %         end
        
        function set.viewingWidgetHandle(this,value)
            %handles=this.handles;
            if isa(value,'matRad_ViewingWidget')
                this.viewingWidgetHandle=value;
                
                getFromViewingWidget(this);
                
            else
                % disable all buttons
                UpdateButtonState(this,'off');
            end
            %this.handles=handles;
        end
    end
    
    methods (Access = protected)
        function this = createLayout(this)
            h98 = this.widgetHandle;
            
            matRad_cfg = MatRad_Config.instance();
            
            %Create Main Grid layout
            gridSize = [1 18];
            elSize = [0.9 0.9];
            [i,j] = ndgrid(1:gridSize(1),1:gridSize(2));
            gridPos = arrayfun(@(i,j) computeGridPos(this,[i j],gridSize,elSize),i,j,'UniformOutput',false);
            
            %Display info about current displayed cube
            h84 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','Data Info:',...
                'TooltipString','Info about the currently displayed distribution',...
                'Style','text',...
                'HorizontalAlignment','left',...
                'Position',gridPos{1},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','DataInfo');
            
            %Text Minimum Value
            h84 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','min value:',...
                'TooltipString','Minimum value of the currently displayed distribution',...
                'Style','text',...
                'HorizontalAlignment','left',...
                'Position',gridPos{2} .* [1 1 0.5 1],...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','MinVal');
            
            h84 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','',...
                'TooltipString','Minimum value of the currently displayed distribution',...
                'Style','text',...
                'HorizontalAlignment','left',...
                'Position',(gridPos{2} + [0.5 0 0 0]) .* [1 1 0.5 1],...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtMinVal');
            
            
            %Text Maximum Value
            h116 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','max value:',...
                'TooltipString','Maximum value of the currently displayed distribution',...
                'Style','text',...
                'HorizontalAlignment','left',...
                'Position',gridPos{3} .* [1 1 0.5 1],...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','MaxVal');
            
            h117 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','',...
                'TooltipString','Maximum value of the currently displayed distribution',...
                'Style','text',...
                'HorizontalAlignment','left',...
                'Position',(gridPos{3} + [0.5 0 0 0]) .* [1 1 0.5 1],...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtMaxVal');
            
            %Set IsoDose Levels
            h85 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','Set IsoDose Levels',...
                'TooltipString','Set iso dose levels for displaying the distributions in the GUI',...
                'Position',gridPos{4},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)btnSetIsoDoseLevels_Callback(this,hObject,eventdata),...
                'Tag','btnSetIsoDoseLevels');
            
            %Text Colorbar & Map section header
            txt = sprintf('Choose to display the CT or the plan result &\nchoose a colormap'); 
            h84 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','Colorbar & -map:',...
                'TooltipString',txt,...
                'Style','text',...
                'HorizontalAlignment','left',...
                'Position',gridPos{5},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','txtColorbarMap');
            
            %popUp Menu CT and plan result
            h101 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String',{'CT (HU)','Plan Result'},...
                'TooltipString','Choose to display the CT or the plan result',...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{6},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)popupmenu_chooseColorData_Callback(this,hObject,eventdata),...
                'Tag','popupmenu_chooseColorData');
            
            %Popup Menu choose colormap
            h104 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','Choose Colormap...',...
                'TooltipString','Choose a colormap for displaying the distributions in the GUI',...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{7},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)popupmenu_chooseColormap_Callback(this,hObject,eventdata),...
                'Tag','popupmenu_chooseColormap');
            
            %Text for CT window preset
            h112 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','CT Window Presets N/A',...
                'TooltipString','Choose a customized CT window or a preset one',...
                'Style','text',...
                'Position',gridPos{8},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','text_windowPreset' );
            
            % Popup for CT window preset
            h113 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String',{  'Custom'; 'Full'; 'Abd/Med'; 'Head'; 'Liver'; 'Lung'; 'Spine'; 'Vrt/Bone' },...
                'TooltipString','Choose a customized CT window or a preset one',...
                'Style','popupmenu',...
                'Value',1,...
                'Position',gridPos{9},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)popupmenu_windowPreset_Callback(this,hObject,eventdata),...
                'Visible','on',... % Default should be off!
                'Tag','popupmenu_windowPreset');
            
            %Text for CT window center
            h99 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Window Center:',...
                'TooltipString','Set the window center',...
                'Style','text',...
                'Position',gridPos{10},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','text_windowCenter' );
            
            %Slider for CT window center
            h102 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'SliderStep',[0.01 0.05],...
                'String','slider',...
                'TooltipString','Set the window center',...
                'Style','slider',...
                'Value',0.5,...
                'Position',gridPos{11} .* [1 1 0.7 1],...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)slider_windowCenter_Callback(this,hObject,eventdata),...
                'Tag','slider_windowCenter');
            
            %Edit CT window center
            h107 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','0.5',...
                'TooltipString','Set the window center',...
                'Style','edit',...
                'Value',1,...
                'Position',gridPos{11} .* [1 1 0.25 1] + [0.7 0 0 0],...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)edit_windowCenter_Callback(this,hObject,eventdata),...
                'Tag','edit_windowCenter');
            
            %Text for CT window Width
            h103 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Window Width:',...
                'TooltipString','Set the window width',...
                'Style','text',...
                'Position',gridPos{12},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','text_windowWidth');
            
            %slider for CT window Width
            h114 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'SliderStep',[0.01 0.05],...
                'String','slider',...
                'TooltipString','Set the window width',...
                'Style','slider',...
                'Value',1,...
                'Position',gridPos{13} .* [1 1 0.7 1],...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)slider_windowWidth_Callback(this, hObject, eventdata),...
                'Tag','slider_windowWidth');
            
            %Edit for CT window Width
            h108 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','1.0',...
                'TooltipString','Set the window width',...
                'Style','edit',...
                'Position',gridPos{13} .* [1 1 0.25 1] + [0.7 0 0 0],...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)edit_windowWidth_Callback(this,hObject,eventdata),...
                'Tag','edit_windowWidth');
            
            
            %Text for CT window Range
            h105 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Range:',...
                'TooltipString','Set the window range',...
                'Style','text',...
                'Position',gridPos{14},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','text_windowRange' );

            %Edit CT window Range
            h106 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','0 1',...
                'TooltipString','Set the window range',...
                'Style','edit',...
                'Position',gridPos{15},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'BackgroundColor',[1 1 1],...
                'Callback',@(hObject,eventdata)edit_windowRange_Callback(this,hObject,eventdata),...
                'Tag','edit_windowRange');
            
            %Text Dose overlay Opacity
            h100 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'HorizontalAlignment','left',...
                'String','Overlay opacity:',...
                'TooltipString','Set the opacity of the displayed distribution',...
                'Style','text',...
                'Position',gridPos{16},...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Tag','textDoseOpacity' );
            
            % Slider Dose overlay Opacity
            h109 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'SliderStep',[0.01 0.05],...
                'String','slider',...
                'TooltipString','Set the opacity of the displayed distribution',...
                'Style','slider',...
                'Value',0.6,...
                'Position',gridPos{17},...
                'BackgroundColor',matRad_cfg.gui.elementColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)sliderOpacity_Callback(this,hObject,eventdata),...
                'Tag','sliderOpacity');
            
            %LockSettings
            h115 = uicontrol(...
                'Parent',h98,...
                'Units','normalized',...
                'String','Lock Settings',...
                'TooltipString','Lock current viewer settings',...
                'Style','checkbox',...
                'Position',gridPos{18},...
                'Value',this.colormapLocked,...
                'BackgroundColor',matRad_cfg.gui.backgroundColor,...
                'ForegroundColor',matRad_cfg.gui.textColor,...
                'FontSize',matRad_cfg.gui.fontSize,...
                'FontName',matRad_cfg.gui.fontName,...
                'FontWeight',matRad_cfg.gui.fontWeight,...
                'Callback',@(hObject,eventdata)checkbox_lockColormap_Callback(this,hObject,eventdata),...
                'Tag','checkbox_lockColormap' );

            
            this.createHandles();
        end

        function this = doUpdate(this,~)
            try
                %                 minVal=num2str(this.viewingWidgetHandle.dispWindow{selectionIndex,2}(1,1));
                %                 maxVal=num2str(this.viewingWidgetHandle.dispWindow{selectionIndex,2}(1,2));
                if isa(this.viewingWidgetHandle,'matRad_ViewingWidget') %...
                    %                         && (~strcmp(get(this.handles.txtMinVal,'String'),minVal) ...
                    %                         || ~strcmp(get(this.handles.txtMaxVal,'String'),maxVal))  %% new data is loaded
                    this.getFromViewingWidget();
                end
            catch
            end
            this.UpdateColormapOptions();
        end
        
    end
    
    methods
        
        % H101
        function popupmenu_chooseColorData_Callback(this,hObject, ~)
            % hObject    handle to popupmenu_chooseColorData (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_chooseColorData contents as cell array
            %        contents{get(hObject,'Value')} returns selected item from popupmenu_chooseColorData
            
            this.viewingWidgetHandle.colorData = hObject.Value;
            UpdateColormapOptions(this);
        end
        
        % H102
        function slider_windowCenter_Callback(this, hObject, event)
            % hObject    handle to slider_windowCenter (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: get(hObject,'Value') returns position of slider
            %        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
            
            handles = this.handles;
            

            newCenter      = get(hObject,'Value');
            range          = get(handles.slider_windowWidth,'Value');
            selectionIndex = get(handles.popupmenu_chooseColorData,'Value');
            
            this.viewingWidgetHandle.dispWindow{selectionIndex,1}  = [newCenter-range/2 newCenter+range/2];

            
            
            %handles.cBarChanged = true;
            
            this.handles = handles;
            %UpdatePlot(handles);
            UpdateColormapOptions(this);
        end
        
        % H 104
        function popupmenu_chooseColormap_Callback(this,hObject, eventdata)
            % hObject    handle to popupmenu_chooseColormap (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_chooseColormap contents as cell array
            %        contents{get(hObject,'Value')} returns selected item from popupmenu_chooseColormap
            
            handles = this.handles;
            
            index = get(hObject,'Value');
            strings = get(hObject,'String');
            
            selectionIndex = get(handles.popupmenu_chooseColorData,'Value');
            
            switch selectionIndex
                case 1
                    this.viewingWidgetHandle.ctColorMap = strings{index};
                case 2
                    this.viewingWidgetHandle.doseColorMap = strings{index};
                otherwise
            end
            
            %handles.cBarChanged = true;
            % for difference maps cutoff level adjusted to show negative
            % values in cube 
            if strcmp(this.viewingWidgetHandle.doseColorMap,'diffMap') || strcmp(this.viewingWidgetHandle.doseColorMap,'gammaIndex')
                this.viewingWidgetHandle.CutOffLevel = [];
            else
                 this.viewingWidgetHandle.CutOffLevel = 0.01; %default value
            end
            this.handles = handles;
            %UpdatePlot(handles);
            this.UpdateColormapOptions();
        end
        
        % H106
        function edit_windowRange_Callback(this, hObject, eventdata)
            % hObject    handle to edit_windowRange (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: get(hObject,'String') returns contents of edit_windowRange as text
            %        str2double(get(hObject,'String')) returns contents of edit_windowRange as a double
            
            handles = this.handles;
            
            selectionIndex = get(handles.popupmenu_chooseColorData,'Value');
            
            vRange         = str2num(get(hObject,'String'));
            % matlab adds a zero in the beginning when text field is changed
            if numel(vRange) == 3
                vRange = vRange(vRange~=0);
            end
            
            this.viewingWidgetHandle.dispWindow{selectionIndex,1} = sort(vRange);
            
            this.handles = handles;
            %UpdatePlot(handles);
            this.UpdateColormapOptions();
        end
        
        % H107
        function edit_windowCenter_Callback(this, hObject, eventdata)
            % hObject    handle to edit_windowCenter (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: get(hObject,'String') returns contents of edit_windowCenter as text
            %        str2double(get(hObject,'String')) returns contents of edit_windowCenter as a double
            
            
            handles = this.handles;

            newCenter           = str2double(get(hObject,'String'));
            width               = get(handles.slider_windowWidth,'Value');
            selectionIndex      = get(handles.popupmenu_chooseColorData,'Value');
            this.viewingWidgetHandle.dispWindow{selectionIndex,1}  = [newCenter-width/2 newCenter+width/2];

            this.handles = handles;
            % UpdatePlot(handles);
            UpdateColormapOptions(this);
        end
        
        % H108
        function edit_windowWidth_Callback(this, hObject, eventdata)
            % hObject    handle to edit_windowWidth (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: get(hObject,'String') returns contents of edit_windowWidth as text
            %        str2double(get(hObject,'String')) returns contents of edit_windowWidth as a double
            handles = this.handles;

            newWidth            = str2double(get(hObject,'String'));
            center              = get(handles.slider_windowCenter,'Value');
            selectionIndex      = get(handles.popupmenu_chooseColorData,'Value');
            this.viewingWidgetHandle.dispWindow{selectionIndex,1}  = [center-newWidth/2 center+newWidth/2];
            %handles.cBarChanged = true;

            this.handles = handles;
            %this.viewingWidgetHandle.UpdatePlot();
            %UpdatePlot(handles);
            UpdateColormapOptions(this);
        end
        
        % H109
        function sliderOpacity_Callback(this,hObject, eventdata)
            % hObject    handle to sliderOpacity (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            %handles = this.handles;
            
            this.viewingWidgetHandle.doseOpacity = get(hObject,'Value');
            
            %this.handles = handles;
            %UpdatePlot(handles);
            
            
        end
        
        % H113
        function popupmenu_windowPreset_Callback(this, hObject, event)
            % hObject    handle to popupmenu_windowPreset (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_windowPreset contents as cell array
            %        contents{get(hObject,'Value')} returns selected item from popupmenu_windowPreset
            handles = this.handles;

            selectionIndexCube      = 1; % working on ct only
            selectionIndexWindow    = get(handles.popupmenu_windowPreset,'Value');
            newCenter               = this.windowPresets(selectionIndexWindow).center;
            newWidth                = this.windowPresets(selectionIndexWindow).width;
            
            this.viewingWidgetHandle.dispWindow{selectionIndexCube,1}  = [newCenter - newWidth/2 newCenter + newWidth/2];

            this.handles = handles;
            %UpdatePlot(handles);
            UpdateColormapOptions(this);
        end
        
        % H114
        function slider_windowWidth_Callback(this,hObject, eventdata)
            % hObject    handle to slider_windowWidth (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hints: get(hObject,'Value') returns position of slider
            %        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
            
            handles = this.handles;

            newWidth = get(hObject,'Value');
            center   = get(handles.slider_windowCenter,'Value');
            selectionIndex = get(handles.popupmenu_chooseColorData,'Value');
            this.viewingWidgetHandle.dispWindow{selectionIndex,1}  = [center-newWidth/2 center+newWidth/2];

            this.handles = handles;
            %UpdatePlot(handles);
            UpdateColormapOptions(this);
        end
        
        % H115 Callback
        function checkbox_lockColormap_Callback(this, hObject, ~)
            % hObject    handle to checkbox_lockColormap (see GCBO)
            % eventdata  reserved - to be defined in a future version of MATLAB
            % handles    structure with handles and user data (see GUIDATA)
            
            % Hint: get(hObject,'Value') returns toggle state of checkbox_lockColormap
            
            handles = this.handles;
            this.colormapLocked = get(hObject,'Value');
            if isa(this.viewingWidgetHandle,'matRad_ViewingWidget')
                this.viewingWidgetHandle.lockColorSettings=this.colormapLocked;
            end
            if this.colormapLocked
                state = 'Off'; %'Inactive';
            else
                state = 'On';
            end
            
            set(handles.popupmenu_chooseColorData,'Enable',state);
            set(handles.popupmenu_windowPreset,'Enable',state);
            set(handles.slider_windowWidth,'Enable',state);
            set(handles.slider_windowCenter,'Enable',state);
            set(handles.edit_windowWidth,'Enable',state);
            set(handles.edit_windowCenter,'Enable',state);
            set(handles.edit_windowRange,'Enable',state);
            set(handles.popupmenu_chooseColormap,'Enable',state);
            
            this.handles = handles;
        end
        
        % button: set iso dose levels
        function btnSetIsoDoseLevels_Callback(this,hObject, eventdata)
            handles = this.handles;
            prompt = {['Enter iso dose levels in [Gy]. Enter space-separated numbers, e.g. 1.5 2 3 4.98. Enter 0 to use default values']};
            if isequal(this.viewingWidgetHandle.IsoDose_Levels,0) || ~isvector(this.viewingWidgetHandle.IsoDose_Levels) || any(~isnumeric(this.viewingWidgetHandle.IsoDose_Levels)) || any(isnan(this.viewingWidgetHandle.IsoDose_Levels))
                defaultLine = {'1 2 3 '};
            else
                if isrow(this.viewingWidgetHandle.IsoDose_Levels)
                    defaultLine = cellstr(num2str(this.viewingWidgetHandle.IsoDose_Levels,'%.2g '));
                else
                    defaultLine = cellstr(num2str(this.viewingWidgetHandle.IsoDose_Levels','%.2g '));
                end
            end
            
            try
                Input = inputdlg(prompt,'Set iso dose levels ', [1 70],defaultLine);
                if ~isempty(Input)
                    this.viewingWidgetHandle.IsoDose_Levels = (sort(str2num(Input{1})));
                    if length(this.viewingWidgetHandle.IsoDose_Levels) == 1 && (this.viewingWidgetHandle.IsoDose_Levels(1) ~= 0)
                        this.viewingWidgetHandle.IsoDose_Levels = [this.viewingWidgetHandle.IsoDose_Levels this.viewingWidgetHandle.IsoDose_Levels];
                    end
                    %handles.IsoDose.NewIsoDoseFlag = true;
                end
            catch
                this.showWarning('Couldnt parse iso dose levels - using default values');
                this.viewingWidgetHandle.IsoDose_Levels = 0;
            end
            this.handles = handles;
            %handles = updateIsoDoseLineCache(handles);
            %this.viewingWidgetHandle.NewIsoDoseFlag = false;
            %UpdatePlot(handles);
        end
        
        % Save and update the Colormap
        function UpdateColormapOptions(this)
            handles=this.handles;
            if this.colormapLocked
                return;
            end
            
            %selectionIndex = this.handles.popupmenu_chooseColorData;
            
            % save the lock state
            updateLockState = this.viewingWidgetHandle.updateLock;
            %colorSettingLockState = this.viewingWidgetHandle.lockColorSettings;
            this.viewingWidgetHandle.updateLock = true;
            %this.viewingWidgetHandle.lockColorSettings = true;
            
            
            cMapOptionsSelectList = {}; %get(handles.popupmenu_chooseColorData,'String');
            %Set up the colordata selection box
            if evalin('base','exist(''ct'')')
                
                ct = evalin('base','ct');
                
                if isfield(ct, 'cubeHU')
                    cMapOptionsSelectList{end+1} = 'CT (HU)';
                    set(handles.popupmenu_windowPreset,'Visible','on');
                    set(handles.text_windowPreset,'String','CT Window Preset');
                else
                    cMapOptionsSelectList{end+1} = 'CT (ED)';
                    set(handles.popupmenu_windowPreset,'Visible','off');
                    set(handles.text_windowPreset,'String','CT Window Presets N/A');
                end
                
                
                if evalin('base','exist(''resultGUI'')') 
                    cMapOptionsSelectList{end+1} = 'Plan result';
                elseif this.viewingWidgetHandle.colorData>1
                    this.viewingWidgetHandle.colorData = 1;
                end
            else %no data is loaded
                %disable all buttons
                UpdateButtonState(this,'off');
                cMapOptionsSelectList = {'No Data'};
            end
            
            
            set(handles.popupmenu_chooseColorData,'String',cMapOptionsSelectList)

            selectionIndex=this.viewingWidgetHandle.colorData;
            set(handles.popupmenu_chooseColorData,'Value',selectionIndex);
            
            %selectionIndex = get(handles.popupmenu_chooseColorData,'Value');
            
            if ~isempty(this.viewingWidgetHandle.dispWindow{selectionIndex,2})
                set(handles.txtMinVal,'String', num2str(this.viewingWidgetHandle.dispWindow{selectionIndex,2}(1,1)));
                set(handles.txtMaxVal,'String', num2str(this.viewingWidgetHandle.dispWindow{selectionIndex,2}(1,2)));
            end
            cMapStrings = get(handles.popupmenu_chooseColormap,'String');
            
            
            try
                if selectionIndex == 1
                    ct = evalin('base','ct');
                    currentMap = this.viewingWidgetHandle.ctColorMap;
                    window = this.viewingWidgetHandle.dispWindow{selectionIndex,1};
                    if isfield(ct, 'cubeHU')
                        minMax = [min(ct.cubeHU{1}(:)) max(ct.cubeHU{1}(:))];
                    else
                        minMax = [min(ct.cube{1}(:)) max(ct.cube{1}(:))];
                    end
                    % adjust value for custom window to current
                    this.windowPresets(1).width = max(window) - min(window);
                    this.windowPresets(1).center = mean(window);
                    % update full window information
                    this.windowPresets(2).width = minMax(2) - minMax(1);
                    this.windowPresets(2).center = mean(minMax);
                elseif selectionIndex == 2
                    result = evalin('base','resultGUI');
                    dose = result.(this.viewingWidgetHandle.SelectedDisplayOption);
                    currentMap = this.viewingWidgetHandle.doseColorMap;
                    minMax = [min(dose(:)) max(dose(:))];
                    window = this.viewingWidgetHandle.dispWindow{selectionIndex,1};
                    if isempty(window)
                        window = minMax;
                    end
                else
                    window = [0 1];
                    minMax = window;
                    currentMap = 'bone';
                end
            catch
                window = [0 1];
                minMax = window;
                currentMap = 'bone';
            end
            
            valueRange = minMax(2) - minMax(1);
            
            windowWidth = window(2) - window(1);
            windowCenter = mean(window);
            
            %This are some arbritrary settings to configure the sliders
            sliderCenterMinMax = [minMax(1)-valueRange/2 minMax(2)+valueRange/2];
            sliderWidthMinMax = [0 valueRange*2];
            
            %if we have selected a value outside this range, we adapt the slider
            %windows
            if windowCenter < sliderCenterMinMax(1)
                sliderCenterMinMax(1) = windowCenter;
            end
            if windowCenter > sliderCenterMinMax(2)
                sliderCenterMinMax(2) = windowCenter;
            end
            if windowWidth < sliderWidthMinMax(1)
                sliderWidthMinMax(1) = windowWidth;
            end
            if windowWidth > sliderWidthMinMax(2)
                sliderWidthMinMax(2) = windowWidth;
            end
            
            set(handles.edit_windowCenter,'String',num2str(windowCenter,3));
            set(handles.edit_windowWidth,'String',num2str(windowWidth,3));
            set(handles.edit_windowRange,'String',num2str(window,4));
            set(handles.slider_windowCenter,'Min',sliderCenterMinMax(1),'Max',sliderCenterMinMax(2),'Value',windowCenter);
            set(handles.slider_windowWidth,'Min',sliderWidthMinMax(1),'Max',sliderWidthMinMax(2),'Value',windowWidth);
            
            cMapPopupIndex = find(strcmp(currentMap,cMapStrings));
            set(handles.popupmenu_chooseColormap,'Value',cMapPopupIndex);
            this.viewingWidgetHandle.updateLock=updateLockState;
            this.handles=handles;
        end
        %Update button enable/disables
        function UpdateButtonState(this,state)
            % state is on or off
            handles=this.handles;
            
            set(handles.checkbox_lockColormap,'Value',this.colormapLocked);
            if this.colormapLocked
                state='off';
            end
            
            %set(handles.checkbox_lockColormap,'Enable',state);
            set(handles.popupmenu_chooseColorData,'Enable',state);
            set(handles.popupmenu_windowPreset,'Enable',state);
            set(handles.slider_windowWidth,'Enable',state);
            set(handles.slider_windowCenter,'Enable',state);
            set(handles.edit_windowWidth,'Enable',state);
            set(handles.edit_windowCenter,'Enable',state);
            set(handles.edit_windowRange,'Enable',state);
            set(handles.popupmenu_chooseColormap,'Enable',state);
            set(handles.sliderOpacity,'Enable',state);
            set(handles.btnSetIsoDoseLevels,'Enable',state);
            
            this.handles=handles;
        end
        
        %get Viewing settings from the Viewer Widget 
        function getFromViewingWidget(this)
            if evalin('base','exist(''ct'')')
                % enable all buttons
                UpdateButtonState(this,'on');
            else
                % no data loaded, disable all buttons
                UpdateButtonState(this,'off');
            end
            
            handles=this.handles;
            
            % get the default value from the viewer widget
            set(handles.popupmenu_chooseColorData,'Value',this.viewingWidgetHandle.colorData);
            
            availableColormaps = matRad_getColormap();
            currentCtMapIndex   = find(strcmp(availableColormaps,this.viewingWidgetHandle.ctColorMap));
            currentDoseMapIndex = find(strcmp(availableColormaps,this.viewingWidgetHandle.doseColorMap));
            
            if evalin('base','exist(''resultGUI'')') % state 3
                set(handles.popupmenu_chooseColormap,'Value',currentDoseMapIndex);
            else
                set(handles.popupmenu_chooseColormap,'Value',currentCtMapIndex);
            end
            this.handles=handles;
        end
    end
    
end

